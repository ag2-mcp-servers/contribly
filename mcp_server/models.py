# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:23:30+00:00

from __future__ import annotations

from datetime import datetime
from typing import Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class Artifact(BaseModel):
    contentLength: Optional[float] = None
    contentType: Optional[str] = None
    height: Optional[float] = None
    label: Optional[str] = None
    url: Optional[str] = None
    width: Optional[float] = None


class ArtifactFormat(BaseModel):
    contentType: Optional[str] = None
    fileExtension: Optional[str] = None
    forContentType: Optional[str] = None
    label: Optional[str] = None
    preserveAspectRatio: Optional[bool] = None
    public: Optional[bool] = None
    upscaleAllowed: Optional[bool] = None


class ArtifactFormats(BaseModel):
    contribution: Optional[List[ArtifactFormat]] = None
    cover: Optional[List[ArtifactFormat]] = None
    profileImage: Optional[List[ArtifactFormat]] = None


class ChangeLogItem(BaseModel):
    date: datetime
    description: Optional[str] = None
    title: str


class Client(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None


class Credential(BaseModel):
    scopes: Optional[List[str]] = None
    type: Optional[str] = None
    user: Optional[str] = None
    value: Optional[str] = None


class ErrorField(BaseModel):
    message: Optional[str] = None
    name: str


class ErrorResponse(BaseModel):
    fields: Optional[List[ErrorField]] = None
    message: Optional[str] = None


class EventType(BaseModel):
    id: str
    name: str


class Export(BaseModel):
    downloadUrl: Optional[str] = None
    finished: Optional[datetime] = None
    id: str
    owner: str
    progress: Optional[float] = None
    started: datetime
    step: Optional[str] = None


class ExportSummary(BaseModel):
    contributions: float = Field(
        ..., description='The number of contributions selected for export.'
    )
    estimatedSize: Optional[str] = Field(
        None, description="Human readable estimate of the export size. ie. '10MB'."
    )
    media: float = Field(
        ..., description='The number of media files included in this export.'
    )
    totalMediaSize: float = Field(
        ..., description='The expected total size of the media files to be exported.'
    )


class Flag(BaseModel):
    date: Optional[datetime] = None
    email: Optional[str] = None
    id: Optional[str] = None
    notes: Optional[str] = None
    type: Optional[str] = None


class FormField(BaseModel):
    description: Optional[str] = None
    label: Optional[str] = None
    name: Optional[str] = None
    options: Optional[List[str]] = None
    public: Optional[bool] = None
    required: Optional[bool] = None
    type: Optional[str] = None


class FormResponse(BaseModel):
    contribution: Optional[str] = None
    date: Optional[datetime] = None
    form: Optional[str] = None
    id: Optional[str] = None
    responses: Optional[Dict[str, str]] = None
    user: Optional[str] = None


class FormResponseSubmission(BaseModel):
    contribution: Optional[str] = None
    form: Optional[str] = None
    responses: Optional[Dict[str, str]] = None


class Group(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None


class LatLong(BaseModel):
    latitude: Optional[float] = None
    longitude: Optional[float] = None


class LinkedProfile(BaseModel):
    bio: Optional[str] = None
    email: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    picture: Optional[str] = None
    profile: Optional[str] = None
    registered: Optional[datetime] = None


class ModerationState(BaseModel):
    id: str
    label: str
    public: bool


class NotificationPreview(BaseModel):
    email: Optional[str] = None
    html: Optional[str] = None
    subject: Optional[str] = None


class OsmId(BaseModel):
    osmId: Optional[float] = None
    osmType: Optional[str] = None


class Place(BaseModel):
    country: Optional[str] = None
    geohash: Optional[str] = None
    google: Optional[str] = None
    latLong: Optional[LatLong] = None
    name: Optional[str] = None
    osm: Optional[OsmId] = None


class Subscription(BaseModel):
    assignment: Optional[str] = None
    email: Optional[str] = None
    id: str
    includeBody: bool
    includeThumbenail: Optional[bool] = None
    slackChannel: Optional[str] = None
    token: str
    types: List[str]
    user: str


class SubscriptionSubmission(BaseModel):
    assignment: Optional[str] = None
    email: Optional[str] = None
    includeBody: bool
    includeThumbenail: Optional[bool] = None
    slackChannel: Optional[str] = None
    types: List[str]


class SubscriptionType(BaseModel):
    id: str
    name: str


class TagSet(BaseModel):
    id: str
    name: str


class TagSetSubmission(BaseModel):
    name: str
    urlWords: str


class TagSubmission(BaseModel):
    colour: Optional[str] = None
    name: str
    tagSet: Optional[TagSet] = None
    urlWords: Optional[str] = None


class User(BaseModel):
    bio: Optional[str] = None
    displayName: Optional[str] = None
    id: Optional[str] = None
    registered: Optional[datetime] = None
    username: Optional[str] = None


class ChangeLogGetResponse(RootModel[List[ChangeLogItem]]):
    root: List[ChangeLogItem]


class ContributionRefinementTypesGetResponse(RootModel[List[str]]):
    root: List[str]


class ContributionRefinementsGetResponse(RootModel[Optional[Dict[str, List[str]]]]):
    root: Optional[Dict[str, List[str]]] = None


class ContributionsIdLikesGetResponse(RootModel[List[str]]):
    root: List[str]


class CredentialsGetResponse(RootModel[List[Credential]]):
    root: List[Credential]


class EventTypesGetResponse(RootModel[List[EventType]]):
    root: List[EventType]


class FormResponsesGetResponse(RootModel[List[FormResponse]]):
    root: List[FormResponse]


class ScopesGetResponse(RootModel[List[str]]):
    root: List[str]


class SubscriptionTypesGetResponse(RootModel[List[SubscriptionType]]):
    root: List[SubscriptionType]


class SubscriptionsGetResponse(RootModel[List[Subscription]]):
    root: List[Subscription]


class TagsetsGetResponse(RootModel[List[TagSet]]):
    root: List[TagSet]


class UsersGetResponse(RootModel[List[User]]):
    root: List[User]


class Authority(BaseModel):
    client: Optional[Client] = None
    id: Optional[str] = None
    user: Optional[User] = None


class Media(BaseModel):
    duration: Optional[float] = None
    id: Optional[str] = None
    place: Optional[Place] = None
    type: Optional[str] = None


class MediaUsage(BaseModel):
    artifacts: Optional[List[Artifact]] = None
    id: Optional[str] = None
    media: Optional[Media] = None


class ModerationAction(BaseModel):
    id: str
    label: str
    resultingState: ModerationState


class ModerationHistoryItem(BaseModel):
    action: Optional[ModerationAction] = None
    date: datetime
    notes: Optional[str] = None


class ModerationHistoryItemSubmission(BaseModel):
    action: Optional[ModerationAction] = None
    notes: Optional[str] = None


class Tag(BaseModel):
    colour: Optional[str] = Field(
        None, description='Optional HTML hexcode colour', examples=['#0061a6']
    )
    id: str
    name: str
    tagSet: Optional[TagSet] = None
    urlWords: Optional[str] = None


class Via(BaseModel):
    authority: Optional[Authority] = None
    ipAddress: Optional[str] = None
    ipAddressPlace: Optional[Place] = None


class TagsGetResponse(RootModel[List[Tag]]):
    root: List[Tag]


class Assignment(BaseModel):
    allowsAnonymousContributions: Optional[bool] = None
    callToAction: Optional[str] = Field(
        None,
        description='An optional call to action specific to this assignment. ie. Submit your snow pictures.',
    )
    cover: Optional[MediaUsage] = None
    created: Optional[datetime] = None
    description: Optional[str] = None
    embargo: Optional[datetime] = None
    ends: Optional[datetime] = None
    featured: Optional[bool] = None
    id: Optional[str] = None
    mediaRequired: Optional[bool] = None
    moderator: Optional[str] = Field(
        None,
        description='Optional credential id of the moderator who owns this particular assignment.',
    )
    name: Optional[str] = None
    open: Optional[bool] = Field(
        None,
        description='Helper value. Is this assignment currently open? Based on the value of the ends field.',
    )
    receiptMessage: Optional[str] = Field(
        None,
        description='An optional assignment specific message to be displayed on successful contribution submission. For example, this might be used to inform contributors of assignment specific moderation time frames.',
    )
    starts: Optional[datetime] = None
    tags: Optional[List[Tag]] = None
    urlWords: Optional[str] = None
    webUrl: Optional[str] = None


class AssignmentSubmission(BaseModel):
    allowsAnonymousContributions: Optional[bool] = None
    cover: Optional[MediaUsage] = None
    description: Optional[str] = None
    embargo: Optional[datetime] = None
    ends: Optional[datetime] = None
    featured: Optional[bool] = None
    id: Optional[str] = None
    mediaRequired: Optional[bool] = None
    moderator: Optional[str] = Field(
        None,
        description='Optional credential id of the login which will moderator this assignment.',
    )
    name: str
    receiptMessage: Optional[str] = Field(
        None,
        description='An optional assignment specific message to be displayed on successful contribution submission. For example, this might be used to inform contributors of assignment specific moderation time frames.',
    )
    starts: Optional[datetime] = None
    tags: Optional[List[Tag]] = None
    urlWords: Optional[str] = None


class Contribution(BaseModel):
    assignment: Optional[Assignment] = None
    attribution: Optional[str] = Field(
        None,
        description="The public attribution for this contribution. This will be the display name of the registered user or the contributor's first and last name if they provided them while making a non authenticated contribution. A blank attribution field indicates and anonymous contribution.",
    )
    body: Optional[str] = None
    created: Optional[datetime] = None
    headline: Optional[str] = None
    id: Optional[str] = None
    mediaUsages: Optional[List[MediaUsage]] = None
    moderationHistory: Optional[List[ModerationHistoryItem]] = None
    place: Optional[Place] = None
    urlWords: Optional[str] = None
    via: Optional[Via] = None


class Form(BaseModel):
    callToAction: Optional[str] = None
    cssUrl: Optional[str] = None
    fields: Optional[List[FormField]] = None
    heading: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    noCss: Optional[bool] = None
    ownedBy: Optional[str] = None
    tags: Optional[List[Tag]] = None


class FormSubmission(BaseModel):
    callToAction: Optional[str] = None
    cssUrl: Optional[str] = None
    fields: Optional[List[FormField]] = None
    heading: Optional[str] = None
    name: Optional[str] = None
    noCss: Optional[bool] = None
    tags: Optional[List[Tag]] = None


class AssignmentsGetResponse(RootModel[List[Assignment]]):
    root: List[Assignment]


class ContributionsGetResponse(RootModel[List[Contribution]]):
    root: List[Contribution]


class FormsGetResponse(RootModel[List[Form]]):
    root: List[Form]
